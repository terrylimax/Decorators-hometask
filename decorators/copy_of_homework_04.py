# -*- coding: utf-8 -*-
"""Copy of homework_04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pQlxjy959WaFLKy3z1lnNfZdt2x7bdOu

# Домашнее задание: декораторы

## Импорт библиотек, установка констант
"""

import requests
import time
import re
import hashlib

from random import randint

BOOK_PATH = 'https://www.gutenberg.org/files/2638/2638-0.txt'

"""## Задание 1"""

def benchmark(func):
    """
    Декоратор, выводящий время, которое заняло выполнение декорируемой функции
    """

    def wrapper(*args, **kwargs):
        wrapper.start_time = time.perf_counter()
        result = func(*args, **kwargs)
        wrapper.end_time = time.perf_counter()
        print(f"Время выполнения функции {func.__name__}: {wrapper.end_time - wrapper.start_time}")
        return result
    return wrapper

"""## Задание 2"""

def logging(func):
    """
    Декоратор, который выводит параметры с которыми была вызвана функция
    """
    def wrapper(*args, **kwargs):
      args_tuple=()
      dict_kwargs={}
      for arg in args:
        args_tuple+=(arg,)
      for key, value in kwargs.items():
        dict_kwargs[key] = value
      print(f"{args_tuple}, {dict_kwargs}")
      result = func(*args, **kwargs)
      return result

    return wrapper

"""## Задание 3"""

def counter(func):
    """
    Декоратор, считающий и выводящий количество вызовов декорируемой функции
    """
    def wrapper(*args, **kwargs):
        wrapper.call_count += 1
        return func(*args, **kwargs)
    wrapper.call_count = 0
    return wrapper

"""## Задание 4"""

def memo(func):
  """
  Декоратор, запоминающий результаты исполнения функции func, чьи аргументы args должны быть хешируемыми
  """
  cache = {}

  def fmemo(*args):
    for arg in args:
      number_bytes = str(arg).encode('utf-8')
      # Хеширование с использованием MD5
      md5_hash = hashlib.md5(number_bytes).hexdigest()
      cache[arg] = md5_hash

  fmemo.cache = cache
  return fmemo

"""## Тестирование"""

@counter
@logging
@benchmark
def word_count(word, url=BOOK_PATH):
    """
    Функция для посчета указанного слова на html-странице
    """
    # отправляем запрос в библиотеку Gutenberg и забираем текст
    raw = requests.get(url).text

    # заменяем в тексте все небуквенные символы на пробелы
    processed_book = re.sub('[\W]+' , ' ', raw).lower()

    # считаем
    cnt = len(re.findall(word.lower(), processed_book))

    return f"Cлово {word} встречается {cnt} раз"

print(word_count('whole'))
print(f"Функция была вызвана: {word_count.call_count} раз")

def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

# измеряем время выполнения
start_time = time.perf_counter()
result = fib(30)
end_time = time.perf_counter()
print(end_time-start_time)

@memo
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

# измеряем время выполнения
start_time = time.perf_counter()
result = fib(30)
end_time = time.perf_counter()
print(end_time-start_time)